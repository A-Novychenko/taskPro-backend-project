{
  "openapi": "3.0.1",
  "info": {
    "version": "1.1.0",
    "title": "TaskPRO",
    "description": "APIservice task manager - TaskPRO",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{"url": "https://taskproapi.onrender.com"}],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Board",
      "description": "Boards endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create a new user",
        "parameters": [],

        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "User creation error.",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login user",
        "parameters": [],

        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User is logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Login error.",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout user",

        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          }
        ],
        "security": [{"Bearer": []}],

        "responses": {
          "204": {
            "description": "User is logout"
          },

          "401": {
            "description": "Missing header with authorization token."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get information about the current user",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          }
        ],

        "responses": {
          "200": {
            "description": "Information found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/auth/user": {
      "put": {
        "tags": ["Auth"],
        "summary": "Update profile user",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          }
        ],

        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/thema": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Ghange theme",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          }
        ],
        "requestBody": {
          "description": "Thema change.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThemeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thema changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/support": {
      "post": {
        "tags": ["Auth"],
        "summary": "Send an email to technical support",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          }
        ],
        "requestBody": {
          "description": "Email and comment to support",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/": {
      "get": {
        "tags": ["Board"],
        "summary": "Get all boards",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          }
        ],
        "responses": {
          "200": {
            "description": "All user boards received.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllBoardsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/ ": {
      "post": {
        "tags": ["Board"],
        "summary": "Create new board",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          }
        ],
        "requestBody": {
          "description": "Create new board.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New board created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "This board name already exists."
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId} ": {
      "put": {
        "tags": ["Board"],
        "summary": "Update board by id",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          }
        ],
        "requestBody": {
          "description": "Update fields.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Board updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}": {
      "delete": {
        "tags": ["Board"],
        "summary": "Delete board by id",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          }
        ],
        "responses": {
          "200": {
            "description": "Board deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/columns": {
      "get": {
        "tags": ["Board"],
        "summary": "Get all columns",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          }
        ],
        "responses": {
          "200": {
            "description": "Get columns.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetColumnsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/columns ": {
      "post": {
        "tags": ["Board"],
        "summary": "Create new column",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          }
        ],
        "requestBody": {
          "description": "Create new column.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateColumnRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Column created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateColumnResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId} ": {
      "put": {
        "tags": ["Board"],
        "summary": "Update column by id",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          },
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "type": "string",
            "description": "Column id"
          }
        ],
        "requestBody": {
          "description": "Column updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateColumnRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Column updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateColumnResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId}": {
      "delete": {
        "tags": ["Board"],
        "summary": "Delete column by id",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          },
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "type": "string",
            "description": "Column id"
          }
        ],
        "responses": {
          "200": {
            "description": "Column deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/boards/{boardId}/columns/{columnId}/tasks": {
      "get": {
        "tags": ["Board"],
        "summary": "Get tasks",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          },
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "type": "string",
            "description": "Column id"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks received.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTasksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId}/tasks ": {
      "post": {
        "tags": ["Board"],
        "summary": "Create task",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          },
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "type": "string",
            "description": "Column id"
          }
        ],
        "requestBody": {
          "description": "Create new task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId}/tasks/{taskId} ": {
      "put": {
        "tags": ["Board"],
        "summary": "Update task by id",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          },
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "type": "string",
            "description": "Column id"
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string",
            "description": "Task id"
          }
        ],
        "requestBody": {
          "description": "Task change.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/boards/{boardId}/columns/{columnId}/tasks/{taskId}": {
      "delete": {
        "tags": ["Board"],
        "summary": "Delete task by id",
        "security": [{"Bearer": []}],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string",
            "description": "The token issued to the current user."
          },
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "type": "string",
            "description": "Board id"
          },
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "type": "string",
            "description": "Column id"
          },
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string",
            "description": "Task id"
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "mango"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "mango@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User's name",
            "example": "mango123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "created"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "201"
              },
              "user": {
                "type": "object",
                "description": "User data",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "name",
                    "example": "mango"
                  },
                  "email": {
                    "type": "string",
                    "description": "email",
                    "example": "mango@mail.com"
                  }
                }
              }
            }
          }
        },

        "example": {
          "status": "created",
          "code": 201,
          "user": {
            "name": "mango",
            "email": "mango@mail.com"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "mango@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User's name",
            "example": "mango123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "OK"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "token": {
                "type": "string",
                "description": "Bearer token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              },
              "user": {
                "type": "object",
                "description": "User data",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "email",
                    "example": "mango@mail.com"
                  },
                  "name": {
                    "type": "string",
                    "description": "name",
                    "example": "mango"
                  },
                  "thema": {
                    "type": "string",
                    "description": "thema",
                    "example": "violet"
                  },
                  "avatarURL": {
                    "type": "string",
                    "description": "avatarURL",
                    "example": "//www.gravatar.com/avatar/cb7969c38a80489e114749a256e14a32"
                  }
                }
              }
            }
          }
        },

        "example": {
          "status": "OK",
          "code": 200,
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OTg4ZGFlNzRjMGViZjQ5OGM2NGZjNSIsImlhdCI6MTY4NzgyNDI4OCwiZXhwIjoxNjg3OTA3MDg4fQ.tHaujmuh6TnigFcVbrCjScMAxsncHiO4VWUBwuVHk_0",
          "user": {
            "email": "mango@gmail.com",
            "name": "mango",
            "thema": "violet",
            "avatarURL": "//www.gravatar.com/avatar/cb7969c38a80489e114749a256e14a32"
          }
        }
      },
      "GetUserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "status": {
                "type": "string",
                "description": "User's avatar",
                "example": "OK"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "token": {
                "type": "string",
                "description": "Bearer token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              },
              "user": {
                "type": "object",
                "description": "User data",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "email",
                    "example": "Mango@mail.com"
                  },
                  "name": {
                    "type": "string",
                    "description": "name",
                    "example": "Mango"
                  },
                  "thema": {
                    "type": "string",
                    "description": "thema",
                    "example": "violet"
                  },
                  "avatarURL": {
                    "type": "string",
                    "description": "avatarURL",
                    "example": "//www.gravatar.com/avatar/cb7969c38a80489e114749a256e14a32"
                  }
                }
              }
            }
          }
        },

        "example": {
          "status": "OK",
          "code": 200,
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OTg4ZGFlNzRjMGViZjQ5OGM2NGZjNSIsImlhdCI6MTY4Nzc4NjgzMiwiZXhwIjoxNjg3ODY5NjMyfQ.EBxwiQFbtJwKdbGD58qGyFGEtSiG7KA1C1Xkwe6kNNw",
          "user": {
            "email": "novychenkoae@gmail.com",
            "name": "novychenkoae",
            "thema": "violet",
            "avatarURL": "//www.gravatar.com/avatar/cb7969c38a80489e114749a256e14a32"
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "required": true,
            "description": "User's email",
            "format": "email",
            "example": "mango@mail.com"
          },
          "name": {
            "type": "string",
            "required": true,
            "description": "name",
            "example": "mango"
          },
          "password": {
            "type": "string",
            "required": true,
            "description": "User's name",
            "example": "mango123"
          },

          "avatarURL": {
            "type": "string",
            "description": "avatarURL",
            "example": "//www.gravatar.com/avatar/cb7969c38a80489e114749a256e14a32"
          }
        }
      },
      "UpdateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "status": {
                "type": "string",
                "description": "User's avatar",
                "example": "OK"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },

              "user": {
                "type": "object",
                "description": "User data",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "email",
                    "example": "Mango@mail.com"
                  },
                  "name": {
                    "type": "string",
                    "description": "name",
                    "example": "Mango"
                  },
                  "thema": {
                    "type": "string",
                    "description": "thema",
                    "example": "violet"
                  },
                  "avatarURL": {
                    "type": "string",
                    "description": "avatarURL",
                    "example": "//www.gravatar.com/avatar/cb7969c38a80489e114749a256e14a32"
                  }
                }
              }
            }
          }
        },

        "example": {
          "status": "OK",
          "code": 200,
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OTg4ZGFlNzRjMGViZjQ5OGM2NGZjNSIsImlhdCI6MTY4Nzc4NjgzMiwiZXhwIjoxNjg3ODY5NjMyfQ.EBxwiQFbtJwKdbGD58qGyFGEtSiG7KA1C1Xkwe6kNNw",
          "user": {
            "email": "novychenkoae@gmail.com",
            "name": "novychenkoae",
            "thema": "violet",
            "avatarURL": "//www.gravatar.com/avatar/cb7969c38a80489e114749a256e14a32"
          }
        }
      },

      "ThemeRequest": {
        "type": "object",

        "properties": {
          "thema": {
            "type": "string",
            "description": "thema",
            "format": "['dark', 'light', 'violet']",
            "example": "dark"
          }
        }
      },
      "ThemeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Thema",
            "properties": {
              "status": {
                "type": "string",
                "description": "Thema changed.",
                "example": "OK"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "thema": {
                "type": "string",
                "description": "thema",
                "thema": "dark"
              }
            }
          }
        },
        "example": {"thema": "dark"}
      },
      "SupportRequest": {
        "type": "object",
        "required": ["email", "comment"],
        "properties": {
          "email": {
            "type": "string",
            "description": "Feedback email",
            "format": "email",
            "example": "mango@mail.com"
          },
          "comment": {
            "type": "string",
            "description": "User's comment",
            "example": "Lorem ipsum"
          }
        }
      },
      "SupportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "OK"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "message": {
                "type": "string",
                "description": "status message",
                "example": "email sent"
              }
            }
          }
        },

        "example": {
          "status": "OK",
          "code": 200,
          "message": "Email sent"
        }
      },

      "GetAllBoardsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "All boards",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status",
                "example": "OK"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "message": {
                "type": "string",
                "description": "message",
                "example": "Success"
              },
              "boards": {
                "type": "array",
                "description": "An array of user boards",
                "boards": []
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "message": "success",
          "boards": [
            {
              "_id": "649a0ea19b3bc2ba3a3d866d",
              "title": "Project1",
              "background": "backgroundURL",
              "dashboardIcon": "icon"
            },
            {
              "_id": "649a0ea19b3bc2ba3a3d866t",
              "title": "Project2",
              "background": "backgroundURL",
              "dashboardIcon": "icon"
            }
          ]
        }
      },
      "CreateBoardRequest": {
        "type": "object",
        "required": ["title", "background", "dashboardIcon"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Board's name",
            "example": "new bord"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "format": "email",
            "example": "12"
          },
          "dashboardIcon": {
            "type": "string",
            "description": "Board's previcon",
            "example": "12"
          }
        }
      },
      "CreateBoardResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "created"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "201"
              },
              "message": {
                "type": "string",
                "description": "message",
                "example": "Success"
              },
              "board": {
                "type": "object",
                "description": "Object Board",
                "board": {
                  "type": "object",
                  "description": "board object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Board's id",
                      "example": "649a0ed5fee974ec2948d6d8"
                    },
                    "title": {
                      "type": "string",
                      "description": "Board's id",
                      "example": "649a0ed5fee974ec2948d6d8"
                    },
                    "background": {
                      "type": "string",
                      "description": "Board's background name",
                      "example": "25"
                    },
                    "dashboardIcon": {
                      "type": "string",
                      "description": "Board's icon name",
                      "example": "25"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "message": "success",
          "boards": {
            "_id": "649a0ea19b3bc2ba3a3d866d",
            "title": "Project1",
            "background": "backgroundName",
            "dashboardIcon": "iconName"
          }
        }
      },
      "DeleteBoardResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "deleted"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "message": {
                "type": "string",
                "description": "message"
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "message": "Deleted successfully"
        }
      },
      "GetColumnsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "deleted"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "message": {
                "type": "string",
                "description": "message"
              },
              "columns": {
                "type": "array",
                "description": "array columns"
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "message": "Columns successfully received",
          "columns": [
            {
              "_id": "649cb7e58a9011f69846e3aa",
              "title": "Novychenko Column",
              "owner": "649c57605fe27df73edbaaf7"
            },
            {
              "_id": "649cb809128867e6eeaef92b",
              "title": "Novychenko Column",
              "owner": "649c57605fe27df73edbaaf7"
            }
          ]
        }
      },
      "CreateColumnRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Column's name",
            "example": "new column"
          }
        }
      },
      "CreateColumnResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "created"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "201"
              },
              "message": {
                "type": "string",
                "description": "message",
                "example": "Success"
              },
              "column": {
                "type": "object",
                "description": "Object column",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "Column's id",
                    "example": "649a0ed5fee974ec2948d6d8"
                  },
                  "title": {
                    "type": "string",
                    "description": "Column's name",
                    "example": "649a0ed5fee974ec2948d6d8"
                  },
                  "owner": {
                    "type": "string",
                    "description": "Column's background owner",
                    "example": "649a0ed5fee974ec2948d6d8"
                  }
                }
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 201,
          "message": "Operation successful",
          "column": {
            "_id": "649ccc9d6bb50f5e4c1924bb",
            "title": "Novychenko Column 3",
            "owner": "649c57605fe27df73edbaaf7"
          }
        }
      },
      "GetTasksResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "deleted"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "200"
              },
              "message": {
                "type": "string",
                "description": "message"
              },
              "tasks": {
                "type": "array",
                "description": "array tasks"
              }
            }
          }
        },
        "example": {
          "status": "success",
          "code": 200,
          "message": "Tasks successfully received",
          "tasks": [
            {
              "_id": "649d5899f40a099ab1715613",
              "title": "task1",
              "description": "test create task 1",
              "priority": "without",
              "owner": "649cb809128867e6eeaef92b",
              "deadline": "2023-06-29T10:10:33.595Z"
            },
            {
              "_id": "649d58a6f40a099ab1715616",
              "title": "task1",
              "description": "test create task 1",
              "priority": "without",
              "deadline": "2023-07-10T12:04:35.199Z",
              "owner": "649cb809128867e6eeaef92b"
            }
          ]
        }
      },
      "CreateTaskRequest": {
        "type": "object",
        "required": ["title", "description", "deadline", "priority"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Task's name",
            "example": "new task"
          },
          "description": {
            "type": "string",
            "description": "Task's descriotion",
            "example": "to do"
          },
          "deadline": {
            "type": "string",
            "description": "Task deadline",
            "example": "1688990675199"
          },
          "priority": {
            "type": "string",
            "description": "Task's priority",
            "example": "low"
          }
        }
      },
      "CreateTaskResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "data",
            "properties": {
              "status": {
                "type": "string",
                "description": "response status",
                "example": "created"
              },
              "code": {
                "type": "integer",
                "description": "Code",
                "example": "201"
              },
              "message": {
                "type": "string",
                "description": "message",
                "example": "Success"
              },
              "task": {
                "type": "object",
                "description": "Object task",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "Task's id",
                    "example": "649a0ed5fee974ec2948d6d8"
                  },
                  "title": {
                    "type": "string",
                    "description": "Task's name",
                    "example": "new task"
                  },
                  "owner": {
                    "type": "string",
                    "description": "Task's owner",
                    "example": "649a0ed5fee974ec2948d6d8"
                  },
                  "description": {
                    "type": "string",
                    "description": "Task's description",
                    "example": "to do"
                  },
                  "priority": {
                    "type": "string",
                    "description": "Task's priority",
                    "example": "low"
                  },
                  "deadline": {
                    "type": "string",
                    "description": "Task's deadline",
                    "example": "2023-07-10T12:04:35.199Z"
                  }
                }
              }
            }
          }
        },
        "example": {
          "status": "create",
          "code": 201,
          "message": "success",
          "task": {
            "title": "task1",
            "description": "test task 1",
            "priority": "medium",
            "deadline": "2023-07-10T12:04:35.199Z",
            "owner": "649cb809128867e6eeaef92b",
            "_id": "649d6a94cffa0ae1acca44d2"
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
